<?php

namespace N98\Magento\Command\Database;

use IMI\DatabaseHelper\Operations\Dump;
use IMI\DatabaseHelper\TestCase;
use SplFileInfo;

/**
 * @covers \IMI\DatabaseHelper\Operations\Dump
 */
class DumpCommandTest extends TestCase {

    protected $helper;

    protected function getInstance($helper = null) {
        $dontAsker = function ( $prompt, $default ) {
            return $default;
        };

        if ($helper) {
            $this->helper = $helper;
        } else {
            $this->helper = $this->getHelper();
        }

        return new Dump($this->helper, null, $dontAsker);
    }

    public function testInstance() {
        $this->assertInstanceOf( '\IMI\DatabaseHelper\Operations\Dump', $this->getInstance() );
    }

    public function testExecute() {
        $instance = $this->getInstance();
        $instance->setAddTime( true )
                 ->setIsOnlyCommand( true )
                 ->setIsForce( true )
                 ->setCompression( 'gz' )
                 ->setFilename( 'foo.sql' );

        $commands = $instance->createExec()->getCommands();
        $this->assertCount( 1, $commands );
        $this->assertContains( 'mysqldump', $commands[0] );
    }

    /**
     * @see filenamePatterns
     */
    public function provideFilenamePatternsAndOptions() {
        return [
            # testAddTimeAutogenerated
            [ '/^.*[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{6}\.sql$/', [] ],
            # testAddTimePrefixAutogenerated
            [ '/^[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{6}.*\.sql$/', [ 'addTime' => 'prefix', ] ],
            # testAddTimeFilenameSpecified
            [ '/^.*[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{6}\.sql.gz$/', [ 'compression' => 'gzip', ] ],
            # testAddTimeFilenameSpecified
            [ '/^foo_[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{6}\.sql$/', [ 'filename' => 'foo.sql', ] ],
            # testAddTimePrefixFilenameSpecified
            [ '/^[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{6}_foo\.sql$/', [ 'filename' => 'foo.sql', 'addTime' => 'prefix', ] ],
            # testAddTimeOffFilenameSpecified
            [ '/^foo.sql$/', [ 'filename' => 'foo.sql', 'addTime' => 'no', ] ],
            # testAddTimeFilenameSpecifiedRelative
            [ '/^..\/foo_[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{6}\.sql$/', [ 'filename' => '../foo.sql', ] ],
        ];
    }

    /**
     * @test
     * @dataProvider provideFilenamePatternsAndOptions
     *
     * @param string $regex
     * @param array $options
     *
     * @return void
     */
    public function filenamePatterns( $regex, array $options ) {
        $instance = $this->getInstance();

        foreach ( $options as $option => $value ) {
            $func = 'set' . ucfirst( $option );
            $instance->$func( $value );
        }

        $filename = $instance->createExec()->getFileName();
        $this->assertRegExp( $regex, $filename );
    }

    public function testWithStripOption() {
        $instance = $this->getInstance($this->getHelperWithTestDb());

        $options = array(
            'addTime'     => true,
            'isForce'        => true,
            'strip'        => 'employees not_existing_table_1',
            'compression'  => 'gzip',
        );

        foreach ( $options as $option => $value ) {
            $func = 'set' . ucfirst( $option );
            $instance->$func( $value );
        }

        $db = $this->helper->getDbName();

        $commands = implode(PHP_EOL, $instance->createExec()->getCommands());

        $this->assertContains( "--ignore-table=$db.employees", $commands );
        $this->assertNotContains( "not_existing_table_1", $commands );
        $this->assertContains( ".sql.gz", $commands );
    }
}
